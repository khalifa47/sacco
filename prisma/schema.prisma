// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum UserStatus {
  active
  inactive
}

enum LoanStatus {
  pending
  approved
  rejected
  disbursed
  paid
}

enum Frequency {
  weekly
  monthly
  quarterly
  yearly
}

enum ContributionType {
  shares
  welfare
}

enum TransactionType {
  debit
  credit
}

enum PaymentMethod {
  card
  mpesa
  paypal
}

model User {
  id          String     @id // comes from auth
  national_id String     @unique @db.VarChar(20)
  email       String     @unique
  phone       String     @unique
  firstName   String     @map("first_name")
  otherNames  String?    @map("other_names")
  lastName    String     @map("last_name")
  role        Role       @default(user)
  status      UserStatus @default(inactive)
  password    String
  lastActive  DateTime   @map("last_active")
  createdAt   DateTime   @default(now()) @map("created_at")

  notifications Notification[]
  loans         Loan[]
  contributions Contribution[]
  guarantors    Guarantor[]

  @@map("users")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  title     String
  content   String
  goTo      String?  @map("go_to")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Loan {
  id                 Int        @id @default(autoincrement())
  userId             String     @map("user_id")
  amount             Float
  status             LoanStatus @default(pending)
  frequency          Frequency
  amountPerFrequency Float      @map("amount_per_frequency")
  purpose            String
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions LoanTransaction[]
  guarantors   Guarantor[]

  @@map("loans")
}

model LoanTransaction {
  id        Int             @id // will be receipt ID
  loanId    Int             @map("loan_id")
  amount    Float
  balance   Float
  type      TransactionType // debit => loan repayment, credit => loan disbursement
  method    PaymentMethod
  createdAt DateTime        @default(now()) @map("created_at")

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_transactions")
}

model Guarantor {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  loanId    Int      @map("loan_id")
  approved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("guarantors")
}

model Contribution {
  id                 Int              @id @default(autoincrement())
  userId             String           @map("user_id")
  amount             Float
  frequency          Frequency
  amountPerFrequency Float            @map("amount_per_frequency")
  type               ContributionType // shares => odd ID, welfare => even ID
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions ContributionTransaction[]

  @@map("contributions")
}

model ContributionTransaction {
  id             Int             @id // will be receipt ID
  contributionId Int             @map("contribution_id")
  amount         Float
  balance        Float
  type           TransactionType // debit => shares withdrawal (cannot debit welfare), credit => contribution deposit
  method         PaymentMethod
  createdAt      DateTime        @default(now()) @map("created_at")

  contribution Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)

  @@map("contribution_transactions")
}

// Option 1: Have a single account table with a type column (Shares, Loans, Welfare) then have a single transaction table

// Option \_2_/: Have 2 separate tables, one for Loans, the other for contributions (Shares, Welfare) then have a separate transaction table for each account type
